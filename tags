!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CMAKE_BINARY_DIR	Makefile	/^CMAKE_BINARY_DIR = \/home\/linux\/fsmart$/;"	m
CMAKE_COMMAND	Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	Makefile	/^CMAKE_SOURCE_DIR = \/home\/linux\/fsmart$/;"	m
DRIVERBOARD_USART_H	src/usart.h	6;"	d
EQUALS	Makefile	/^EQUALS = =$/;"	m
HW_PRO_H	src/hw_pro.h	10;"	d
MSG_TYPE_CMD	src/msg.h	13;"	d
MSG_TYPE_DATA	src/msg.h	14;"	d
MSG_TYPE_HEART	src/msg.h	15;"	d
MSG_TYPE_ID	src/msg.h	12;"	d
RM	Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	Makefile	/^SUFFIXES =$/;"	m
_FSOCKET_H	src/fsocket.h	2;"	d
_READDATA_H	src/readdata.h	2;"	d
body	src/hw_pro.h	/^	hw_pro_body body;$/;"	m	struct:hw_pro
body	src/msg.h	/^    char 		body[128];	$/;"	m	struct:m_package
cid	src/fsocket.c	/^char cid[12];$/;"	v
close_connect	src/fsocket.c	/^int close_connect(void)$/;"	f
close_read_data	src/readdata.c	/^void close_read_data(void)$/;"	f
close_usart	src/usart.c	/^void close_usart()$/;"	f
cmd	src/hw_pro.h	/^	unsigned char cmd;$/;"	m	struct:hw_pro_body
code_check	src/usart.c	/^u8 code_check(u8 *data,size_t len)$/;"	f
connect_server	src/fsocket.c	/^int connect_server(char *serverAddr,int port,char *id)$/;"	f
connect_socket	src/fsocket.c	/^int connect_socket(int fd,char *serverAddr,int port)$/;"	f
create_socket	src/fsocket.c	/^int create_socket(void)$/;"	f
data	src/hw_pro.h	/^	char 		  *data;$/;"	m	struct:hw_pro_body
fd	src/msg.h	/^	int 		fd;$/;"	m	struct:m_package
golbalSocketFd	src/fsocket.c	/^int golbalSocketFd=0;$/;"	v
handler_socket_status	src/fsocket.c	/^void handler_socket_status(int ret)$/;"	f
head	src/hw_pro.h	/^	hw_pre_head head;$/;"	m	struct:hw_pro
head	src/msg.h	/^    msg_head 	head;$/;"	m	struct:m_package
hw_pre_head	src/hw_pro.h	/^typedef struct hw_pre_head$/;"	s
hw_pro	src/hw_pro.h	/^typedef struct hw_pro$/;"	s
hw_pro_body	src/hw_pro.h	/^typedef struct hw_pro_body$/;"	s
index	src/hw_pro.h	/^	int 		  index;$/;"	m	struct:hw_pre_head
init_usart	src/usart.c	/^int init_usart(int fd)$/;"	f
isConn	src/usart.c	/^char 		isConn 	= 0;$/;"	v
isConnect	src/fsocket.c	/^char isConnect = 0;$/;"	v
isRun	src/readdata.c	/^unsigned char isRun;$/;"	v
isRun	src/usart.c	/^char 		isRun 	= 0;$/;"	v
len	src/hw_pro.h	/^	int 		  len;$/;"	m	struct:hw_pre_head
len	src/msg.h	/^    unsigned char 	len;$/;"	m	struct:m_head
listener_usart_data	src/usart.c	/^void listener_usart_data(void (*call)(char* data,size_t len))$/;"	f
m_head	src/msg.h	/^typedef struct m_head$/;"	s
m_package	src/msg.h	/^typedef struct m_package$/;"	s
main	src/main.c	/^int main(int argc,char *argv[])	$/;"	f
msg_h	src/msg.h	10;"	d
msg_head	src/msg.h	/^}msg_head;$/;"	t	typeref:struct:m_head
open_usart	src/usart.c	/^int  open_usart(const char *ttys)$/;"	f
package	src/msg.h	/^}package;$/;"	t	typeref:struct:m_package
parserData	src/readdata.c	/^void parserData(char *data,ssize_t len)$/;"	f
parser_device_data	src/usart.c	/^void parser_device_data(u8 *data,size_t len)$/;"	f
readData	src/usart.c	/^int readData(int fd)$/;"	f
read_thread	src/usart.c	/^int read_thread()$/;"	f
run_heartbeat	src/fsocket.c	/^void* run_heartbeat(void *args)$/;"	f
run_read	src/readdata.c	/^void* run_read(void  *args)$/;"	f
run_try_connect	src/fsocket.c	/^void* run_try_connect(void *args)$/;"	f
send_data	src/fsocket.c	/^int send_data(char *data,size_t len)$/;"	f
send_msg	src/fsocket.c	/^int send_msg(package msg)$/;"	f
server_addr	src/fsocket.c	/^char *server_addr;$/;"	v
server_port	src/fsocket.c	/^int  server_port;$/;"	v
start_heartbeat	src/fsocket.c	/^void start_heartbeat(void)$/;"	f
start_read_data	src/readdata.c	/^int start_read_data(void)$/;"	f
start_try_connect_thread	src/fsocket.c	/^void start_try_connect_thread(void)$/;"	f
thread_exeute	src/usart.c	/^void *thread_exeute(void *args)$/;"	f
tryIsRun	src/fsocket.c	/^char tryIsRun = 0;$/;"	v
try_connect_server	src/fsocket.c	/^void try_connect_server(void)$/;"	f
try_open_usart	src/usart.c	/^void try_open_usart(void)$/;"	f
tty_comm	src/usart.c	/^char 		*tty_comm;$/;"	v
tty_fd	src/usart.c	/^int         tty_fd;$/;"	v
type	src/hw_pro.h	/^	unsigned char type;$/;"	m	struct:hw_pre_head
type	src/msg.h	/^    char    		type;$/;"	m	struct:m_head
u8	src/usart.h	/^typedef unsigned char u8;$/;"	t
usart_parser_data	src/usart.c	/^void usart_parser_data(u8 *data,size_t len)$/;"	f
usart_send_data	src/usart.c	/^void usart_send_data(u8 *data,size_t len)$/;"	f
usart_status_ctl	src/usart.c	/^void usart_status_ctl()$/;"	f
